{% extends "base.html" %}

{% block content %}
<div class="blockchain-container">
    <!-- Block 1 -->
   <!-- Block 1 -->
   {% for block in blocks %}
   {% include "block_base.html" with block_id=block.id nonce=block.nonce data=block.data prev_hashed_value=block.prev_hashed_value hashed_value=block.hashed_value %}
{% endfor %}

   
</div>
<style>
    .blockchain-container {
        display: flex; /* Makes the blocks align in a row */
        flex-wrap: nowrap; /* Ensures blocks do not wrap to the next line */
        overflow-x: auto; /* Enables horizontal scrolling if necessary */
        padding: 10px;
        border: 1px solid #ccc;
        background-color: #f9f9f9;
    }

    .blockchain-container .block {
        margin-right: 10px; /* Optional: Adds space between blocks */
    }

    /* Optional: Customize scrollbar */
    .blockchain-container::-webkit-scrollbar {
        height: 8px;
    }

    .blockchain-container::-webkit-scrollbar-thumb {
        background-color: #888;
        border-radius: 4px;
    }

    .blockchain-container::-webkit-scrollbar-thumb:hover {
        background-color: #555;
    }
</style>
<script>
document.addEventListener('DOMContentLoaded', () => {
    const blocks = [1, 2, 3,4,5]; // List of block IDs
   
    blocks.forEach((blockId) => {
        const dataInput = document.getElementById(`data${blockId}`);
        const nonceInput = document.getElementById(`nonce${blockId}`);
        const hashField = document.getElementById(`hash${blockId}`);
        const mineButton = document.getElementById(`mineButton${blockId}`);

        // Event listeners for inputs
        dataInput.addEventListener('input', () => handleDataInput(blockId));
        nonceInput.addEventListener('input', () => handleDataInput(blockId));

        // Event listener for the mine button
        mineButton.addEventListener('click', (event) => {
            event.preventDefault();
            handleDataInput(blockId, 1);
        });
    });
});

// Generic function to handle data input for a block
async function handleDataInput(blockId, mine = 0) {
    const data = document.getElementById(`data${blockId}`).value;
    const nonce = document.getElementById(`nonce${blockId}`).value;
    const nonceid = document.getElementById(`nonce${blockId}`);
    const hashField = document.getElementById(`hash${blockId}`);
    const prev_hashed_value = document.getElementById(`prevHash${blockId}`).value;
    const prevhash = [];
    for (let i = 1; i < 6; i++) {
        const temp = document.getElementById(`prevHash${i}`).value;
        prevhash.push(temp);
    }
    
    for (let i = 0; i < 5; i++) {  // Start from index 0 to 3
        console.log(prevhash[i]);    // Corrected: Output value for index i
    }
    
    try {
        const response = await fetch('/blockchain/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest',
                'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value,
            },
            body: JSON.stringify({ blockId, data, nonce,prevhash, mine }),
        });

        if (response.ok) {
            const result = await response.json();
            hashField.value = result.hashed_value;
            nonceid.value = result.nonces;

        } else {
            hashField.value = 'Error generating hash';
        }
    } catch (error) {
        hashField.value = 'Error generating hash';
    }
}
</script>

{% endblock %}
